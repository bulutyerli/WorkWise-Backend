import {
  ColumnType,
  Generated,
  Insertable,
  Selectable,
  Updateable,
} from 'kysely';

export interface CompanyDatabase {
  staff: StaffTable;
  offices: OfficeTable;
  category_expenses: CatExpensesTable;
  category_income: CatIncomeTable;
  departments: DepartmentsTable;
  expenses: ExpensesTable;
  income: IncomeTable;
  roles: RolesTable;
  shifts: ShiftsTable;
  annual_requests: AnnualTable;
}

export interface StaffTable {
  // Columns that are generated by the database should be marked
  // using the `Generated` type. This way they are automatically
  // made optional in inserts and updates.
  id: Generated<number>;
  name: string;
  surname: string;
  birthday: Date;
  phone: string;
  salary: number;
  join_date: Date;
  sickness_leave: number;
  department_id: number;
  office_id: number;
  role_id: number;
  shift_id: number | null;
  manager_id: number | null;
  created_at: ColumnType<Date, string | undefined, never>;
  email: string;
  firebase_id: string;
}

export type Staff = Selectable<StaffTable>;
export type NewStaff = Insertable<StaffTable>;
export type StaffUpdate = Updateable<StaffTable>;

export interface OfficeTable {
  id: Generated<number>;
  name: string;
}

export type Offices = Selectable<OfficeTable>;
export type NewOffice = Insertable<OfficeTable>;
export type OfficeUpdate = Updateable<OfficeTable>;

export interface CatExpensesTable {
  id: Generated<number>;
  category: string;
}

export type CategoryExpenses = Selectable<CatExpensesTable>;
export type NewCategoryExpenses = Insertable<CatExpensesTable>;
export type CategoryExpensesUpdate = Updateable<CatExpensesTable>;

export interface CatIncomeTable {
  id: Generated<number>;
  category: string;
}

export type CategoryIncome = Selectable<CatIncomeTable>;
export type NewCategoryIncome = Insertable<CatIncomeTable>;
export type CategoryIncomeUpdate = Updateable<CatIncomeTable>;

export interface DepartmentsTable {
  id: Generated<number>;
  name: string;
}

export type Deparments = Selectable<DepartmentsTable>;
export type NewDeparment = Insertable<DepartmentsTable>;
export type DeparmentUpdate = Updateable<DepartmentsTable>;

export interface ExpensesTable {
  id: Generated<number>;
  description: string;
  amount: number;
  user_id: number;
  date: Date;
  category: number;
  created_at: ColumnType<Date, string | undefined, never>;
}

export type Expenses = Selectable<ExpensesTable>;
export type NewExpense = Insertable<ExpensesTable>;
export type ExpenseUpdate = Updateable<ExpensesTable>;

export interface IncomeTable {
  id: Generated<number>;
  description: string;
  amount: number;
  date: Date;
  category: number;
  created_at: ColumnType<Date, string | undefined, never>;
  year?: number;
}

export type Income = Selectable<IncomeTable>;
export type NewIncome = Insertable<IncomeTable>;
export type IncomeUpdate = Updateable<IncomeTable>;

export interface RolesTable {
  id: Generated<number>;
  name: string;
}

export type Role = Selectable<RolesTable>;
export type NewRole = Insertable<RolesTable>;
export type RoleUpdate = Updateable<RolesTable>;

export interface ShiftsTable {
  id: Generated<number>;
  name: string;
}

export interface AnnualTable {
  user_id: number;
  starting_date: Date;
  end_date: Date;
  status: string;
}

export type AnnualLeave = Selectable<AnnualTable>;
export type NewAnnual = Insertable<AnnualTable>;

export type Shift = Selectable<ShiftsTable>;
export type NewShift = Insertable<ShiftsTable>;
export type ShiftUpdate = Updateable<ShiftsTable>;

export type OrderType = 'name' | 'email' | 'role' | 'department' | 'id';
export type FinanceOrderType =
  | 'description'
  | 'amount'
  | 'date'
  | 'category'
  | 'category_id';
